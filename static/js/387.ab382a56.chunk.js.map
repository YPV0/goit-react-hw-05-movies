{"version":3,"file":"static/js/387.ab382a56.chunk.js","mappings":"sSAKMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAHc,+BAIdC,OAAQ,CACNC,QANW,mCAOXC,SAAU,WAIRC,EACS,oBADTA,EAEa,UAFbA,EAGU,WAHVA,EAIa,WAJbA,EAKY,gBAGX,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBP,EAASQ,IAAIF,GAFjC,uBAEKG,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,gCAKHC,QAAQC,IAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,kGAEoBd,EAASQ,IAAIF,EAAwB,CAC1DH,OAAQ,CACNY,MAAOD,KAJR,uBAEKL,EAFL,EAEKA,KAFL,kBAOIA,EAAKC,SAPT,gCASHC,QAAQC,IAAR,MATG,gFAaA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kGAEoBjB,EAASQ,IAAIF,EAA0BW,GAF3D,uBAEKR,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gCAKHE,QAAQC,IAAR,MALG,gFASA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,kGAEoBjB,EAASQ,IAC9BF,EAA0BW,EAAUX,GAHnC,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,EAAKU,MALT,gCAOHR,QAAQC,IAAR,MAPG,gFAWA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,kGAEoBjB,EAASQ,IAC9BF,EAA0BW,EAAUX,GAHnC,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,EAAKC,SALT,gCAOHC,QAAQC,IAAR,MAPG,gF,6IC5DMS,EAAcC,EAAAA,GAAAA,GAAH,mFAMXC,EAAaD,EAAAA,GAAAA,GAAH,+CAIVE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,mKAWVI,EAAUJ,EAAAA,GAAAA,EAAH,4E,SCkBpB,EAnCgB,WACd,OAA8BK,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQZ,GAAYa,EAAAA,EAAAA,MAAZb,QACFc,GAAWC,EAAAA,EAAAA,MAQjB,OANAC,EAAAA,EAAAA,YAAU,WACJhB,IACFG,EAAAA,EAAAA,IAAgBH,GAASiB,MAAK,SAAAzB,GAAI,OAAIoB,EAAWpB,EAAf,GAErC,GAAE,CAACQ,KAGF,+BACE,SAACI,EAAD,UACGO,EAAQO,OAAS,EAChBP,EAAQQ,KAAI,SAAAC,GAAM,OAChB,SAACd,EAAD,WACE,SAACC,EAAD,CACEc,GAAI,CACFC,SAAS,YAAD,OAAcF,EAAOG,IAC7BC,MAAO,CAAEC,KAAMX,IAHnB,UAME,uBAAIM,EAAOM,YAPEN,EAAOG,GADR,KAalB,SAACd,EAAD,UAAS,gDAKlB,C","sources":["components/API/API.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '42200b80456bf8bbad5e7a8d4195c4b9';\nconst baseUrl = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n  baseURL: baseUrl,\n  params: {\n    api_key: apiKey,\n    language: 'en-US',\n  },\n});\n\nconst queries = {\n  getTrending: '/trending/all/day',\n  getMovieDetails: '/movie/',\n  getMovieCast: '/credits',\n  getMovieReviews: '/reviews',\n  getMovieSearch: '/search/movie',\n};\n\nexport async function getTrending() {\n  try {\n    const { data } = await instance.get(queries.getTrending);\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovies(name) {\n  try {\n    const { data } = await instance.get(queries.getMovieSearch, {\n      params: {\n        query: name,\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n  try {\n    const { data } = await instance.get(queries.getMovieDetails + movieId);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const { data } = await instance.get(\n      queries.getMovieDetails + movieId + queries.getMovieCast\n    );\n    return data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const { data } = await instance.get(\n      queries.getMovieDetails + movieId + queries.getMovieReviews\n    );\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieSearch(query) {\n  try {\n    const { data } = await instance.get(queries.getMovieSearch, {\n      params: {\n        query: query,\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import styled from 'styled-components';\nimport { Link as RouterLink } from 'react-router-dom';\n\nexport const ReviewsList = styled.ul`\n  list-style: none;\n  margin-left: 100px;\n  padding: 0;\n`;\n\nexport const ReviewItem = styled.li`\n  margin-bottom: 1em;\n`;\n\nexport const StyledLink = styled(RouterLink)`\n  color: inherit;\n  text-decoration: none;\n  font-size: 20px;\n\n  &:hover {\n    color: inherit;\n    text-decoration: underline;\n  }\n`;\n\nexport const StyledP = styled.p`\n  font-size: 22px;\n  padding: 5px;\n  color: red;\n`;\n","import { useEffect, useState } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'components/API/API';\nimport PropTypes from 'prop-types';\n\nimport { ReviewItem, ReviewsList, StyledLink, StyledP } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState('');\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (movieId) {\n      getMovieReviews(movieId).then(data => setReviews(data));\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      <ReviewsList>\n        {reviews.length > 0 ? (\n          reviews.map(review => (\n            <ReviewItem key={review.id}>\n              <StyledLink\n                to={{\n                  pathname: `/reviews/${review.id}`,\n                  state: { from: location },\n                }}\n              >\n                <p>{review.author}</p>\n              </StyledLink>\n            </ReviewItem>\n          ))\n        ) : (\n          <StyledP>We don't have any reviews for this movie</StyledP>\n        )}\n      </ReviewsList>\n    </>\n  );\n};\n\nexport default Reviews;\nReviews.propTypes = {\n  movieId: PropTypes.string,\n};\n"],"names":["instance","axios","baseURL","params","api_key","language","queries","getTrending","get","data","results","console","log","getMovies","name","query","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews","ReviewsList","styled","ReviewItem","StyledLink","RouterLink","StyledP","useState","reviews","setReviews","useParams","location","useLocation","useEffect","then","length","map","review","to","pathname","id","state","from","author"],"sourceRoot":""}