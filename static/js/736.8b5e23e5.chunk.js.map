{"version":3,"file":"static/js/736.8b5e23e5.chunk.js","mappings":"sSAKMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAHc,+BAIdC,OAAQ,CACNC,QANW,mCAOXC,SAAU,WAIRC,EACS,oBADTA,EAEa,UAFbA,EAGU,WAHVA,EAIa,WAJbA,EAKY,gBAGX,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBP,EAASQ,IAAIF,GAFjC,uBAEKG,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,gCAKHC,QAAQC,IAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,kGAEoBd,EAASQ,IAAIF,EAAwB,CAC1DH,OAAQ,CACNY,MAAOD,KAJR,uBAEKL,EAFL,EAEKA,KAFL,kBAOIA,EAAKC,SAPT,gCASHC,QAAQC,IAAR,MATG,gFAaA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kGAEoBjB,EAASQ,IAAIF,EAA0BW,GAF3D,uBAEKR,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gCAKHE,QAAQC,IAAR,MALG,gFASA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,kGAEoBjB,EAASQ,IAC9BF,EAA0BW,EAAUX,GAHnC,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,EAAKU,MALT,gCAOHR,QAAQC,IAAR,MAPG,gFAWA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,kGAEoBjB,EAASQ,IAC9BF,EAA0BW,EAAUX,GAHnC,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,EAAKC,SALT,gCAOHC,QAAQC,IAAR,MAPG,gF,iJC5DMS,EAAWC,EAAAA,GAAAA,GAAH,iLASRC,EAAWD,EAAAA,GAAAA,GAAH,kNAURE,EAAYF,EAAAA,GAAAA,EAAH,2LAUTG,EAAaH,EAAAA,GAAAA,IAAH,uGAOVI,EAAYJ,EAAAA,GAAAA,IAAH,6GAOTK,GAAaL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,+I,SCSvB,EAzCa,WACX,OAAwBO,EAAAA,EAAAA,UAAS,IAAjC,eAAOV,EAAP,KAAaW,EAAb,KACQb,GAAYc,EAAAA,EAAAA,MAAZd,QACFe,GAAWC,EAAAA,EAAAA,MAQjB,OANAC,EAAAA,EAAAA,YAAU,WACJjB,IACFC,EAAAA,EAAAA,IAAaD,GAASkB,MAAK,SAAA1B,GAAI,OAAIqB,EAAQrB,EAAZ,GAElC,GAAE,CAACQ,KAGF,+BACE,SAACI,EAAD,UACGF,GACCA,EAAKiB,KAAI,SAAAC,GACP,IAAMC,EAAQD,EAAME,aAAN,yCACwBF,EAAME,cACxC,sGAEJ,OACE,SAAChB,EAAD,WACE,SAACI,EAAD,CACEa,GAAI,CACFC,SAAS,SAAD,OAAWJ,EAAMK,IACzBC,MAAO,CAAEC,KAAMZ,IAHnB,UAME,UAACN,EAAD,YACE,SAACD,EAAD,CAAYoB,IAAKP,EAAOQ,IAAKT,EAAMvB,QACnC,SAACU,EAAD,UAAYa,EAAMvB,aATTuB,EAAMK,GAcxB,OAIV,C","sources":["components/API/API.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '42200b80456bf8bbad5e7a8d4195c4b9';\nconst baseUrl = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n  baseURL: baseUrl,\n  params: {\n    api_key: apiKey,\n    language: 'en-US',\n  },\n});\n\nconst queries = {\n  getTrending: '/trending/all/day',\n  getMovieDetails: '/movie/',\n  getMovieCast: '/credits',\n  getMovieReviews: '/reviews',\n  getMovieSearch: '/search/movie',\n};\n\nexport async function getTrending() {\n  try {\n    const { data } = await instance.get(queries.getTrending);\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovies(name) {\n  try {\n    const { data } = await instance.get(queries.getMovieSearch, {\n      params: {\n        query: name,\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n  try {\n    const { data } = await instance.get(queries.getMovieDetails + movieId);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const { data } = await instance.get(\n      queries.getMovieDetails + movieId + queries.getMovieCast\n    );\n    return data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const { data } = await instance.get(\n      queries.getMovieDetails + movieId + queries.getMovieReviews\n    );\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieSearch(query) {\n  try {\n    const { data } = await instance.get(queries.getMovieSearch, {\n      params: {\n        query: query,\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import styled from 'styled-components';\nimport { Link as RouterLink } from 'react-router-dom';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  padding: 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 30px;\n  margin-top: 30px;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #f5f5f5;\n  padding: 15px;\n  border-radius: 10px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n`;\n\nexport const ActorName = styled.p`\n  margin-top: 1em;\n  font-size: 1.2em;\n  text-align: center;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  text-decoration: none;\n`;\n\nexport const ActorImage = styled.img`\n  width: 100%;\n  height: 300px;\n  object-fit: cover;\n  border-radius: 5px;\n`;\n\nexport const ActorInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const StyledLink = styled(RouterLink)`\n  color: inherit;\n  text-decoration: none;\n\n  &:hover {\n    color: inherit;\n    text-decoration: underline;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { getMovieCast } from 'components/API/API';\nimport PropTypes from 'prop-types';\n\nimport {\n  ActorImage,\n  ActorInfo,\n  ActorName,\n  CastItem,\n  CastList,\n  StyledLink,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState('');\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (movieId) {\n      getMovieCast(movieId).then(data => setCast(data));\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      <CastList>\n        {cast &&\n          cast.map(actor => {\n            const image = actor.profile_path\n              ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n              : 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQapfIYpE8vRHlXT5eFwaqr9RGezphQiy3UeQ&usqp=CAU';\n\n            return (\n              <CastItem key={actor.id}>\n                <StyledLink\n                  to={{\n                    pathname: `/cast/${actor.id}`,\n                    state: { from: location },\n                  }}\n                >\n                  <ActorInfo>\n                    <ActorImage src={image} alt={actor.name} />\n                    <ActorName>{actor.name}</ActorName>\n                  </ActorInfo>\n                </StyledLink>\n              </CastItem>\n            );\n          })}\n      </CastList>\n    </>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  movieId: PropTypes.string,\n};\n"],"names":["instance","axios","baseURL","params","api_key","language","queries","getTrending","get","data","results","console","log","getMovies","name","query","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews","CastList","styled","CastItem","ActorName","ActorImage","ActorInfo","StyledLink","RouterLink","useState","setCast","useParams","location","useLocation","useEffect","then","map","actor","image","profile_path","to","pathname","id","state","from","src","alt"],"sourceRoot":""}