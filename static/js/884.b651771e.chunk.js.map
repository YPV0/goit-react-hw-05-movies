{"version":3,"file":"static/js/884.b651771e.chunk.js","mappings":"sSAKMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAHc,+BAIdC,OAAQ,CACNC,QANW,mCAOXC,SAAU,WAIRC,EACS,oBADTA,EAEa,UAFbA,EAGU,WAHVA,EAIa,WAJbA,EAKY,gBAGX,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBP,EAASQ,IAAIF,GAFjC,uBAEKG,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,gCAKHC,QAAQC,IAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,kGAEoBd,EAASQ,IAAIF,EAAwB,CAC1DH,OAAQ,CACNY,MAAOD,KAJR,uBAEKL,EAFL,EAEKA,KAFL,kBAOIA,EAAKC,SAPT,gCASHC,QAAQC,IAAR,MATG,gFAaA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kGAEoBjB,EAASQ,IAAIF,EAA0BW,GAF3D,uBAEKR,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gCAKHE,QAAQC,IAAR,MALG,gFASA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,kGAEoBjB,EAASQ,IAC9BF,EAA0BW,EAAUX,GAHnC,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,EAAKU,MALT,gCAOHR,QAAQC,IAAR,MAPG,gFAWA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,kGAEoBjB,EAASQ,IAC9BF,EAA0BW,EAAUX,GAHnC,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,EAAKC,SALT,gCAOHC,QAAQC,IAAR,MAPG,gF,uFCYP,UA3DqB,WACnB,OAA0BS,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQN,GAAYO,EAAAA,EAAAA,MAAZP,QACFQ,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,YACRb,EAAAA,EAAAA,IAAgBC,GAASa,MAAK,SAAArB,GAAI,OAAIc,EAASd,EAAb,GACnC,GAAE,CAACQ,IAEJ,IAAMc,EACJN,EAASO,WAAT,kBAAiCf,EAAjC,2BACeA,GADf,kBAEeA,EAFf,SAIIgB,EACJR,EAASO,WAAT,kBAAiCf,EAAjC,8BACeA,GADf,kBAEeA,EAFf,YAQF,OACE,iCACE,UAAC,KAAD,YACE,mBAAQiB,QAPO,WACnBP,GAAU,EACX,EAKK,SAA+B,aAC/B,UAAC,KAAD,YACE,SAAC,KAAD,UAAaL,EAAMa,SACnB,yBAAG,eAAkC,GAArBb,EAAMc,aAAkB,OACvCd,EAAMe,cACL,gBACEC,IAAG,yCAAoChB,EAAMe,aAC7CE,IAAKjB,EAAMa,YAIjB,UAAC,KAAD,YACE,SAAC,KAAD,UAAe,cACf,uBAAIb,EAAMkB,YACV,wBAAI,YACJ,UAAC,KAAD,YACE,yBACE,SAAC,KAAD,CAAYC,GAAIV,EAAhB,SAA0B,YAE5B,yBACE,SAAC,KAAD,CAAYU,GAAIR,EAAhB,SAA6B,wBAKrC,SAAC,EAAAS,SAAD,CAAUC,UAAU,wBAAI,eAAxB,UACE,SAAC,KAAD,QAIP,C,mPCtEYC,EAAaC,EAAAA,GAAAA,GAAH,kEAKVC,EAAgBD,EAAAA,GAAAA,GAAH,iEAKbE,EAAYF,EAAAA,GAAAA,GAAH,2FAOTG,GAAaH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,gNAaVK,EAAOL,EAAAA,GAAAA,IAAH,4FAMJM,EAAcN,EAAAA,GAAAA,IAAH,yIAQXO,EAAYP,EAAAA,GAAAA,IAAH,uD","sources":["components/API/API.js","pages/MovieDetails.jsx","pages/MovieDetails.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '42200b80456bf8bbad5e7a8d4195c4b9';\nconst baseUrl = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n  baseURL: baseUrl,\n  params: {\n    api_key: apiKey,\n    language: 'en-US',\n  },\n});\n\nconst queries = {\n  getTrending: '/trending/all/day',\n  getMovieDetails: '/movie/',\n  getMovieCast: '/credits',\n  getMovieReviews: '/reviews',\n  getMovieSearch: '/search/movie',\n};\n\nexport async function getTrending() {\n  try {\n    const { data } = await instance.get(queries.getTrending);\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovies(name) {\n  try {\n    const { data } = await instance.get(queries.getMovieSearch, {\n      params: {\n        query: name,\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n  try {\n    const { data } = await instance.get(queries.getMovieDetails + movieId);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const { data } = await instance.get(\n      queries.getMovieDetails + movieId + queries.getMovieCast\n    );\n    return data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const { data } = await instance.get(\n      queries.getMovieDetails + movieId + queries.getMovieReviews\n    );\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieSearch(query) {\n  try {\n    const { data } = await instance.get(queries.getMovieSearch, {\n      params: {\n        query: query,\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { useState, useEffect } from 'react';\nimport { getMovieDetails } from 'components/API/API';\nimport { useParams, Outlet, useLocation, useNavigate } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Card,\n  GenreList,\n  InfoWrapper,\n  MovieTitle,\n  OverviewTitle,\n  StyledDiv,\n  StyledLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState('');\n  const { movieId } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    getMovieDetails(movieId).then(data => setMovie(data));\n  }, [movieId]);\n\n  const castPath =\n    location.pathname === `/movies/${movieId}/cast`\n      ? `/movies/${movieId}`\n      : `/movies/${movieId}/cast`;\n\n  const reviewsPath =\n    location.pathname === `/movies/${movieId}/reviews`\n      ? `/movies/${movieId}`\n      : `/movies/${movieId}/reviews`;\n\n  const handleGoBack = () => {\n    navigate(-1);\n  };\n\n  return (\n    <>\n      <StyledDiv>\n        <button onClick={handleGoBack}>Go Back</button>\n        <Card>\n          <MovieTitle>{movie.title}</MovieTitle>\n          <p>User Score: {movie.vote_average * 10}%</p>\n          {movie.poster_path && (\n            <img\n              src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n              alt={movie.title}\n            />\n          )}\n        </Card>\n        <InfoWrapper>\n          <OverviewTitle>Overview</OverviewTitle>\n          <p>{movie.overview}</p>\n          <h3>Genres</h3>\n          <GenreList>\n            <li>\n              <StyledLink to={castPath}>Cast</StyledLink>\n            </li>\n            <li>\n              <StyledLink to={reviewsPath}>Reviews</StyledLink>\n            </li>\n          </GenreList>\n        </InfoWrapper>\n      </StyledDiv>\n      <Suspense fallback={<h1>Loading...</h1>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\nimport { NavLink as RouterLink } from 'react-router-dom';\n\nexport const MovieTitle = styled.h1`\n  font-size: 2em;\n  margin-bottom: 1em;\n`;\n\nexport const OverviewTitle = styled.h2`\n  font-size: 1.6em;\n  margin-top: 1em;\n`;\n\nexport const GenreList = styled.ul`\n  list-style: none;\n  padding: 0;\n  display: flex;\n  gap: 1em;\n`;\n\nexport const StyledLink = styled(RouterLink)`\n  color: inherit;\n  text-decoration: none;\n  font-size: 22px;\n  padding: 5px;\n  border: 2px solid black;\n\n  &:hover {\n    color: inherit;\n    text-decoration: underline;\n  }\n`;\n\nexport const Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n`;\n\nexport const InfoWrapper = styled.div`\n  margin-top: 100px;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  margin-bottom: 1em;\n`;\n\nexport const StyledDiv = styled.div`\n  display: flex;\n  gap: 50px;\n`;\n"],"names":["instance","axios","baseURL","params","api_key","language","queries","getTrending","get","data","results","console","log","getMovies","name","query","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews","useState","movie","setMovie","useParams","location","useLocation","navigate","useNavigate","useEffect","then","castPath","pathname","reviewsPath","onClick","title","vote_average","poster_path","src","alt","overview","to","Suspense","fallback","MovieTitle","styled","OverviewTitle","GenreList","StyledLink","RouterLink","Card","InfoWrapper","StyledDiv"],"sourceRoot":""}